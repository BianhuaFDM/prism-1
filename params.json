{
  "name": "Prism",
  "tagline": "Javascript H.264 decoder",
  "body": "# Prism - H.264 decoder in pure javascript \r\n\r\n<img align=\"\" height=\"200\" src=\"http://cdn.cloudwarehub.com/42.pic_hd.jpg\"> \r\n\r\nLogo by **Jiangnan Zhuang**\r\n\r\nPrism is a H.264 decoder written in javascript(ES5), which is used in browser to decode H.264 stream data into RGBA/YCbCr format frames.\r\n\r\nPrism can run in browsers support javascript ES5 or higher standard, and support H.264 realtime decoding profile which contains I/P frames.\r\n\r\nPrism is a project of [CloudwareHub](http://www.cloudwarehub.com), aiming at providing cross platform video stream decoder.\r\n\r\n----\r\n\r\n## Build\r\n\r\nPrism depends on [Node.js](http://nodejs.org/), [npm](http://npmjs.org/), [gruntjs](http://gruntjs.com/). \r\nExecute commands below to build prism, and the built file prism.min.js should be generated in build/ folder.\r\n```\r\n$ npm install\r\n$ bower install\r\n$ grunt\r\n```\r\n## Usage\r\n\r\nPrism uses [requirejs/almod](https://github.com/requirejs/almond) to package, and export `window.prism` if not in AMD context.\r\nThe typical usage of prism should work with websocket, just read raw H.264 nal data from server via websocket and feed into prism, than prism will decode every frame into RGBA/YCbCr format pictures.\r\nSample code is as follows:\r\n```\r\nws.onmessage = function(msg) {\r\n  prism.decodeNal(msg);\r\n  console.log(prism.SL) // decoded frame luma in xy format\r\n  console.log(prism.SCb, prism.SCr) //decoded frame chroma cb/cr in xy format\r\n}\r\n```\r\nThe demo effect of prism is available at [CloudwareHub](http://www.cloudwarehub.com).\r\n## License\r\nBSD-2-Clause\r\n\r\n## Resources\r\n[H.264 standard](https://www.itu.int/rec/T-REC-H.264)\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}